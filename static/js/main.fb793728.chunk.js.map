{"version":3,"sources":["helpers/shufle.js","store/mainReducer.js","helpers/timerView.js","components/Header/Header.jsx","components/Card/Card.jsx","components/GameBoard/GameBoard.jsx","App.jsx","store/index.js","index.js","components/GameBoard/GameBoard.module.css","components/Card/Card.module.css","components/Header/Header.module.css"],"names":["shufleArr","arr","res","i","length","randomNum","Math","floor","random","t","SET_CARD_OPEN","SET_LOCAL_TIMER","ADD_CARD_TO_OPEN_CARDS","CLOSE_ALL_CARDS","TOOGLE_BLOCKED_INTERFACE","TOOGLE_GAME_STARTED","ADD_CARD_TO_GUESSED_CARD","SET_TIMER_ID","SET_INTERVAL_ID","RESET_GAME","SET_GAME_TIME","initialState","gameTimer","isInterfaceBlocked","openedCards","cardsGuessed","isGameStart","isLocalTimer","timerId","undefined","intervalId","cards","id","isOpen","value","isOnBoard","setLocalTimerAC","bool","type","payload","closeAllCardsAC","toogleIsBlockedInterfaceAC","toggleIsGameStartedAC","addCardsToGuessedThunk","id1","id2","dispatch","setTimeout","addCardToGuessedCardsAC","setCardOpen","getState","setCardOpenAC","mainReducer","setTimerIdAC","clearInterval","times","JSON","parse","localStorage","getItem","push","setItem","stringify","window","clearTimeout","startGame","setInterval","formatSeconds","seconds","Header","useSelector","state","useDispatch","className","s","header","timer","counter","disabled","button","hide","onClick","Card","data","card","active","front","back","GameBoard","useState","setTimes","useEffect","timers","sort","a","b","slice","gameBoard","map","times_title","time","App","rootReducer","combineReducers","action","some","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","module","exports"],"mappings":"kNAAO,SAASA,EAAUC,GAExB,IADA,IAAIC,EAAMD,EACDE,EAAIF,EAAIG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAYC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAC5CM,EAAIR,EAAII,GACZJ,EAAII,GAAaJ,EAAIE,GACrBF,EAAIE,GAAKM,EAEX,OAAOP,ECPT,IAAMQ,EAAgB,gBAChBC,EAAkB,kBAClBC,EAAyB,yBACzBC,EAAkB,kBAClBC,EAA2B,2BAC3BC,EAAsB,sBACtBC,EAA2B,2BAC3BC,EAAe,eACfC,EAAkB,kBAClBC,EAAa,aACbC,EAAgB,gBAEhBC,EAAe,CACnBC,UAAW,EACXC,oBAAoB,EACpBC,YAAa,GACbC,aAAc,EACdC,aAAa,EACbC,cAAc,EACdC,aAASC,EACTC,gBAAYD,EACZE,MAAO,CACL,CAAEC,GAAI,EAAGC,QAAQ,EAAOC,MAAO,qBAAOC,WAAW,GACjD,CAAEH,GAAI,EAAGC,QAAQ,EAAOC,MAAO,qBAAOC,WAAW,GACjD,CAAEH,GAAI,EAAGC,QAAQ,EAAOC,MAAO,qBAAOC,WAAW,GACjD,CAAEH,GAAI,EAAGC,QAAQ,EAAOC,MAAO,qBAAOC,WAAW,GACjD,CAAEH,GAAI,EAAGC,QAAQ,EAAOC,MAAO,2BAAQC,WAAW,GAClD,CAAEH,GAAI,EAAGC,QAAQ,EAAOC,MAAO,2BAAQC,WAAW,GAClD,CAAEH,GAAI,EAAGC,QAAQ,EAAOC,MAAO,mDAAYC,WAAW,GACtD,CAAEH,GAAI,EAAGC,QAAQ,EAAOC,MAAO,mDAAYC,WAAW,GACtD,CAAEH,GAAI,EAAGC,QAAQ,EAAOC,MAAO,2BAAQC,WAAW,GAClD,CAAEH,GAAI,GAAIC,QAAQ,EAAOC,MAAO,2BAAQC,WAAW,GACnD,CAAEH,GAAI,GAAIC,QAAQ,EAAOC,MAAO,iCAASC,WAAW,GACpD,CAAEH,GAAI,GAAIC,QAAQ,EAAOC,MAAO,iCAASC,WAAW,GACpD,CAAEH,GAAI,GAAIC,QAAQ,EAAOC,MAAO,2BAAQC,WAAW,GACnD,CAAEH,GAAI,GAAIC,QAAQ,EAAOC,MAAO,2BAAQC,WAAW,GACnD,CAAEH,GAAI,GAAIC,QAAQ,EAAOC,MAAO,6CAAWC,WAAW,GACtD,CAAEH,GAAI,GAAIC,QAAQ,EAAOC,MAAO,6CAAWC,WAAW,KAkGnD,IAAMC,EAAkB,SAACC,GAC9B,MAAO,CACLC,KAAM3B,EACN4B,QAASF,IAkBAG,EAAkB,WAC7B,MAAO,CACLF,KAAMzB,IAIG4B,EAA6B,SAACJ,GACzC,MAAO,CACLC,KAAMxB,EACNyB,QAASF,IAIAK,EAAwB,SAACL,GACpC,MAAO,CACLC,KAAMvB,EACNwB,QAASF,IA0CPM,EAAyB,SAACC,EAAKC,GACnC,OAAO,SAACC,GACNA,EAASL,GAA2B,IACpCM,YAAW,WACTD,EA1CiC,SAACF,EAAKC,GAC3C,MAAO,CACLP,KAAMtB,EACNuB,QAAS,CAACK,EAAKC,IAuCJG,CAAwBJ,EAAKC,IACtCC,EAASL,GAA2B,MACnC,OAsBIQ,EAAc,SAACjB,EAAIE,GAC5B,OAAO,SAACY,EAAUI,GAChBJ,EAtGyB,SAACd,GAC5B,MAAO,CACLM,KAAM5B,EACN6B,QAASP,GAmGAmB,CAAcnB,IADM,MAEqBkB,IAAWE,YAAvD5B,EAFuB,EAEvBA,YAAaG,EAFU,EAEVA,aAAcF,EAFJ,EAEIA,aACjC,IAAKE,EAAc,CACjBmB,EAASV,GAAgB,IACzB,IAAIR,EAAUmB,YAAW,WAEvBD,EAASV,GAAgB,IACzBU,EAASN,OACR,KACHM,EAtEe,SAACd,GACpB,MAAO,CACLM,KAAMrB,EACNsB,QAASP,GAmEEqB,CAAazB,IAEG,IAAvBJ,EAAYpB,QACVoB,EAAY,GAAGU,QAAUA,IAC3BY,EAASH,EAAuBnB,EAAY,GAAGQ,GAAIA,IAC9B,KAAjBP,GAAqBqB,GA3BxB,SAACA,EAAUI,GAAc,IAAD,EACCA,IAAWE,YAApCtB,EADwB,EACxBA,WAAYR,EADY,EACZA,UACjBwB,EAASJ,GAAsB,IAC/BY,cAAcxB,GAEd,IAAIyB,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,GACzDJ,EAAMK,KAAKtC,GACXoC,aAAaG,QAAQ,QAASL,KAAKM,UAAUP,QAwB3CT,GAzDG,SAACA,GACNA,EAASL,GAA2B,IACpCM,YAAW,WACTD,EAASN,KACTM,EAASL,GAA2B,MACnC,QAqDDK,EAASV,GAAgB,IACzB2B,OAAOC,aAAad,IAAWE,YAAYxB,UAE3CkB,EApHG,CACLR,KAAM1B,EACN2B,QAkHkC,CAAEP,KAAIE,aAK/B+B,EAAY,WACvB,OAAO,SAACnB,EAAUI,GAChBJ,EAASJ,GAAsB,IAC/BI,EAjDK,CACLR,KAAMnB,IAiDN,IAAIG,EAAY4B,IAAWE,YAAY9B,UACnCQ,EAAaoC,aAAY,WAC3B5C,IACAwB,EAhFG,CACLR,KAAMlB,EACNmB,QA8EyBjB,MACtB,KACHwB,EAzFK,CACLR,KAAMpB,EACNqB,QAuFyBT,MCzRtB,SAASqC,EAAcC,GAC5B,OAAIA,GAAW,EAAS,OAAN,OAAcA,GAC5BA,EAAU,GAAKA,EAAU,GAAU,MAAN,OAAaA,GAC1CA,GAAW,GACP,IAAN,OAAW9D,KAAKC,MAAM6D,EAAU,IAAhC,YACEA,EAAU,GAAK,EAAI,IAAOA,EAAU,GAAMA,EAAU,SAFxD,E,WC0BaC,EAvBA,WAAO,IAAD,EAC8BC,aAC/C,SAACC,GAAD,OAAWA,EAAMnB,eADX3B,EADW,EACXA,aAAcC,EADH,EACGA,YAAaJ,EADhB,EACgBA,UAG7BwB,EAAW0B,cACjB,OACE,sBAAKC,UAAWC,IAAEC,OAAlB,UACE,qBAAKF,UAAWC,IAAEE,MAAlB,SAA0BT,EAAc7C,KACxC,sBAAKmD,UAAWC,IAAEG,QAAlB,UACGpD,EACD,0CAEF,wBACEqD,SAAUpD,EACV+C,UAAS,UAAKC,IAAEK,OAAP,YAAiBrD,GAAegD,IAAEM,MAC3CC,QAAS,kBAAMnC,EAASmB,MAH1B,gD,gCCSSiB,EAvBF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAERrC,EAAW0B,cAFQ,EAGmBF,aAC1C,SAACC,GAAD,OAAWA,EAAMnB,eADX7B,EAHiB,EAGjBA,mBAAoBG,EAHH,EAGGA,YAM5B,OACE,yBACEoD,SAAUvD,IAAuB4D,EAAKhD,YAAcT,GAAeyD,EAAKlD,OACxEwC,UAAS,UAAKC,IAAEU,KAAP,YAAeD,EAAKlD,QAAUyC,IAAEW,OAAhC,aACNF,EAAKhD,WAAauC,IAAEM,KADd,aAEJtD,GAAegD,IAAEI,UACtBG,QAAS,kBATKjD,EASUmD,EAAKnD,GATXE,EASeiD,EAAKjD,WARxCY,EAASG,EAAYjB,EAAIE,IAD3B,IAAkBF,EAAIE,GAIpB,UAOE,qBAAKuC,UAAWC,IAAEY,QAClB,qBAAKb,UAAWC,IAAEa,KAAlB,SAAyBJ,EAAKjD,YCarBsD,EA7BG,WAAM,MAESlB,aAAY,SAACC,GAAD,OAAWA,EAAMnB,eAApDrB,EAFc,EAEdA,MAAOL,EAFO,EAEPA,YAFO,EAGE+D,mBAAS,IAHX,mBAGjBlC,EAHiB,KAGVmC,EAHU,KAWtB,OANAC,qBAAU,WACR,IAAIC,EAASpC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,GAC1DiC,EAAOC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAC1BL,EAASE,EAAOI,MAAM,EAAG,MACxB,CAACtE,IAGF,sBAAK+C,UAAWC,IAAEuB,UAAlB,UACE,cAAC,EAAD,IACA,qBAAKxB,UAAS,UAAKC,IAAE3C,MAAP,aAAiBL,GAAegD,IAAEM,MAAhD,SACGjD,EAAMmE,KAAI,SAACd,GAAD,OACT,cAAC,EAAD,CAAoBD,KAAMC,GAAfA,EAAKpD,SAGpB,sBAAKyC,UAAS,UAAKC,IAAEnB,MAAP,YAAgB7B,GAAegD,IAAEM,MAA/C,UACE,qBAAKP,UAAWC,IAAEyB,YAAlB,yIACC5C,EAAM2C,KAAI,SAACE,GAAD,OACT,qBAAK3B,UAAWC,IAAE0B,KAAlB,SAAyBjC,EAAciC,e,MCdlCC,MAZf,WACE,OACE,qBAAK5B,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,W,uBCHN6B,EAAcC,0BAAgB,CAAEnD,YNsC7B,WAAoD,IAA/BmB,EAA8B,uDAAtBlD,EAAcmF,EAAQ,uCACxD,OAAQA,EAAOlE,MACb,KAAK5B,EACH,OAAO,2BACF6D,GADL,IAEExC,MAAOwC,EAAMxC,MAAMmE,KAAI,SAACd,GAEtB,OADIA,EAAKpD,KAAOwE,EAAOjE,UAAS6C,EAAKnD,QAAS,GACvCmD,OAIb,KAAKzE,EACH,OAAO,2BACF4D,GADL,IAEE5C,aAAc6E,EAAOjE,UAGzB,KAAK3B,EACH,OAAO,2BACF2D,GADL,IAEE/C,YAAY,GAAD,mBAAM+C,EAAM/C,aAAZ,CAAyBgF,EAAOjE,YAG/C,KAAK1B,EACH,OAAO,2BACF0D,GADL,IAEExC,MAAOwC,EAAMxC,MAAMmE,KAAI,SAACd,GAEtB,OADAA,EAAKnD,QAAS,EACPmD,KAET5D,YAAa,KAGjB,KAAKV,EACH,OAAO,2BACFyD,GADL,IAEEhD,mBAAoBiF,EAAOjE,UAG/B,KAAKxB,EACH,OAAO,2BACFwD,GADL,IAEE7C,YAAa8E,EAAOjE,UAGxB,KAAKvB,EACH,OAAO,2BACFuD,GADL,IAEE9C,aAAc8C,EAAM9C,aAAe,EACnCM,MAAOwC,EAAMxC,MAAMmE,KAAI,SAACd,GAItB,OAHIoB,EAAOjE,QAAQkE,MAAK,SAACzE,GAAD,OAAQA,IAAOoD,EAAKpD,QAC1CoD,EAAKjD,WAAY,GAEZiD,OAIb,KAAKhE,EACH,OAAO,2BACFmD,GADL,IAEEjD,UAAWkF,EAAOjE,UAGtB,KAAKtB,EACH,OAAO,2BACFsD,GADL,IAEE3C,QAAS4E,EAAOjE,UAGpB,KAAKrB,EACH,OAAO,2BACFqD,GADL,IAEEzC,WAAY0E,EAAOjE,UAGvB,KAAKpB,EACH,OAAO,2BACFoD,GADL,IAEE9C,aAAc,EACdH,UAAW,EACXS,MAAO/B,EACLuE,EAAMxC,MAAMmE,KAAI,SAACd,GAEf,OADAA,EAAKjD,WAAY,EACViD,QAKf,QACE,OAAOb,MM7HAmC,EAAQC,sBACnBL,EACAM,8BAAoBC,0BAAgBC,OCHtCC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,UAAY,6BAA6B,MAAQ,yBAAyB,KAAO,wBAAwB,MAAQ,yBAAyB,YAAc,iC,kBCA1KD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,SAAW,uBAAuB,MAAQ,oBAAoB,KAAO,mBAAmB,OAAS,uB,kBCAvKD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,MAAQ,sBAAsB,OAAS,uBAAuB,KAAO,wB","file":"static/js/main.fb793728.chunk.js","sourcesContent":["export function shufleArr(arr) {\r\n  let res = arr;\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    let randomNum = Math.floor(Math.random() * (i + 1));\r\n    let t = arr[randomNum];\r\n    arr[randomNum] = arr[i];\r\n    arr[i] = t;\r\n  }\r\n  return res;\r\n}\r\n","import { shufleArr } from \"../helpers/shufle\";\r\nconst SET_CARD_OPEN = \"SET_CARD_OPEN\";\r\nconst SET_LOCAL_TIMER = \"SET_LOCAL_TIMER\";\r\nconst ADD_CARD_TO_OPEN_CARDS = \"ADD_CARD_TO_OPEN_CARDS\";\r\nconst CLOSE_ALL_CARDS = \"CLOSE_ALL_CARDS\";\r\nconst TOOGLE_BLOCKED_INTERFACE = \"TOOGLE_BLOCKED_INTERFACE\";\r\nconst TOOGLE_GAME_STARTED = \"TOOGLE_GAME_STARTED\";\r\nconst ADD_CARD_TO_GUESSED_CARD = \"ADD_CARD_TO_GUESSED_CARD\";\r\nconst SET_TIMER_ID = \"SET_TIMER_ID\";\r\nconst SET_INTERVAL_ID = \"SET_INTERVAL_ID\";\r\nconst RESET_GAME = \"RESET_GAME\";\r\nconst SET_GAME_TIME = \"SET_GAME_TIME\";\r\n\r\nconst initialState = {\r\n  gameTimer: 0,\r\n  isInterfaceBlocked: false,\r\n  openedCards: [],\r\n  cardsGuessed: 0,\r\n  isGameStart: false,\r\n  isLocalTimer: false,\r\n  timerId: undefined,\r\n  intervalId: undefined,\r\n  cards: [\r\n    { id: 1, isOpen: false, value: \"кот\", isOnBoard: true },\r\n    { id: 2, isOpen: false, value: \"кот\", isOnBoard: true },\r\n    { id: 3, isOpen: false, value: \"пёс\", isOnBoard: true },\r\n    { id: 4, isOpen: false, value: \"пёс\", isOnBoard: true },\r\n    { id: 5, isOpen: false, value: \"рыба\", isOnBoard: true },\r\n    { id: 6, isOpen: false, value: \"рыба\", isOnBoard: true },\r\n    { id: 7, isOpen: false, value: \"динозавр\", isOnBoard: true },\r\n    { id: 8, isOpen: false, value: \"динозавр\", isOnBoard: true },\r\n    { id: 9, isOpen: false, value: \"мышь\", isOnBoard: true },\r\n    { id: 10, isOpen: false, value: \"мышь\", isOnBoard: true },\r\n    { id: 11, isOpen: false, value: \"птица\", isOnBoard: true },\r\n    { id: 12, isOpen: false, value: \"птица\", isOnBoard: true },\r\n    { id: 13, isOpen: false, value: \"змея\", isOnBoard: true },\r\n    { id: 14, isOpen: false, value: \"змея\", isOnBoard: true },\r\n    { id: 15, isOpen: false, value: \"человек\", isOnBoard: true },\r\n    { id: 16, isOpen: false, value: \"человек\", isOnBoard: true },\r\n  ],\r\n};\r\n\r\nexport function mainReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CARD_OPEN: {\r\n      return {\r\n        ...state,\r\n        cards: state.cards.map((card) => {\r\n          if (card.id === action.payload) card.isOpen = true;\r\n          return card;\r\n        }),\r\n      };\r\n    }\r\n    case SET_LOCAL_TIMER: {\r\n      return {\r\n        ...state,\r\n        isLocalTimer: action.payload,\r\n      };\r\n    }\r\n    case ADD_CARD_TO_OPEN_CARDS: {\r\n      return {\r\n        ...state,\r\n        openedCards: [...state.openedCards, action.payload],\r\n      };\r\n    }\r\n    case CLOSE_ALL_CARDS: {\r\n      return {\r\n        ...state,\r\n        cards: state.cards.map((card) => {\r\n          card.isOpen = false;\r\n          return card;\r\n        }),\r\n        openedCards: [],\r\n      };\r\n    }\r\n    case TOOGLE_BLOCKED_INTERFACE: {\r\n      return {\r\n        ...state,\r\n        isInterfaceBlocked: action.payload,\r\n      };\r\n    }\r\n    case TOOGLE_GAME_STARTED: {\r\n      return {\r\n        ...state,\r\n        isGameStart: action.payload,\r\n      };\r\n    }\r\n    case ADD_CARD_TO_GUESSED_CARD: {\r\n      return {\r\n        ...state,\r\n        cardsGuessed: state.cardsGuessed + 2,\r\n        cards: state.cards.map((card) => {\r\n          if (action.payload.some((id) => id === card.id)) {\r\n            card.isOnBoard = false;\r\n          }\r\n          return card;\r\n        }),\r\n      };\r\n    }\r\n    case SET_GAME_TIME: {\r\n      return {\r\n        ...state,\r\n        gameTimer: action.payload,\r\n      };\r\n    }\r\n    case SET_TIMER_ID: {\r\n      return {\r\n        ...state,\r\n        timerId: action.payload,\r\n      };\r\n    }\r\n    case SET_INTERVAL_ID: {\r\n      return {\r\n        ...state,\r\n        intervalId: action.payload,\r\n      };\r\n    }\r\n    case RESET_GAME: {\r\n      return {\r\n        ...state,\r\n        cardsGuessed: 0,\r\n        gameTimer: 0,\r\n        cards: shufleArr(\r\n          state.cards.map((card) => {\r\n            card.isOnBoard = true;\r\n            return card;\r\n          })\r\n        ),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// actions\r\nexport const setLocalTimerAC = (bool) => {\r\n  return {\r\n    type: SET_LOCAL_TIMER,\r\n    payload: bool,\r\n  };\r\n};\r\n\r\nexport const setCardOpenAC = (id) => {\r\n  return {\r\n    type: SET_CARD_OPEN,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const addCardToOpenedCardsAC = (data) => {\r\n  return {\r\n    type: ADD_CARD_TO_OPEN_CARDS,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const closeAllCardsAC = () => {\r\n  return {\r\n    type: CLOSE_ALL_CARDS,\r\n  };\r\n};\r\n\r\nexport const toogleIsBlockedInterfaceAC = (bool) => {\r\n  return {\r\n    type: TOOGLE_BLOCKED_INTERFACE,\r\n    payload: bool,\r\n  };\r\n};\r\n\r\nexport const toggleIsGameStartedAC = (bool) => {\r\n  return {\r\n    type: TOOGLE_GAME_STARTED,\r\n    payload: bool,\r\n  };\r\n};\r\n\r\nexport const addCardToGuessedCardsAC = (id1, id2) => {\r\n  return {\r\n    type: ADD_CARD_TO_GUESSED_CARD,\r\n    payload: [id1, id2],\r\n  };\r\n};\r\n\r\nconst setTimerIdAC = (id) => {\r\n  return {\r\n    type: SET_TIMER_ID,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nconst setIntervalIdAC = (id) => {\r\n  return {\r\n    type: SET_INTERVAL_ID,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nconst setGameTimeAC = (seconds) => {\r\n  return {\r\n    type: SET_GAME_TIME,\r\n    payload: seconds,\r\n  };\r\n};\r\n\r\nconst closeAllCardsThunk = () => {\r\n  return (dispatch) => {\r\n    dispatch(toogleIsBlockedInterfaceAC(true));\r\n    setTimeout(() => {\r\n      dispatch(closeAllCardsAC());\r\n      dispatch(toogleIsBlockedInterfaceAC(false));\r\n    }, 1000);\r\n  };\r\n};\r\n\r\nconst addCardsToGuessedThunk = (id1, id2) => {\r\n  return (dispatch) => {\r\n    dispatch(toogleIsBlockedInterfaceAC(true));\r\n    setTimeout(() => {\r\n      dispatch(addCardToGuessedCardsAC(id1, id2));\r\n      dispatch(toogleIsBlockedInterfaceAC(false));\r\n    }, 1000);\r\n  };\r\n};\r\n\r\nconst resetGame = () => {\r\n  return {\r\n    type: RESET_GAME,\r\n  };\r\n};\r\n\r\nexport const endGame = () => {\r\n  return (dispatch, getState) => {\r\n    let {intervalId, gameTimer} = getState().mainReducer;\r\n    dispatch(toggleIsGameStartedAC(false));\r\n    clearInterval(intervalId);\r\n\r\n    let times = JSON.parse(localStorage.getItem(\"times\")) || [];\r\n    times.push(gameTimer);\r\n    localStorage.setItem(\"times\", JSON.stringify(times))\r\n  };\r\n};\r\n\r\nexport let setCardOpen = (id, value) => {\r\n  return (dispatch, getState) => {\r\n    dispatch(setCardOpenAC(id));\r\n    let { openedCards, isLocalTimer, cardsGuessed } = getState().mainReducer;\r\n    if (!isLocalTimer) {\r\n      dispatch(setLocalTimerAC(true));\r\n      let timerId = setTimeout(() => {\r\n        // время вышло :()\r\n        dispatch(setLocalTimerAC(false));\r\n        dispatch(closeAllCardsAC());\r\n      }, 3000);\r\n      dispatch(setTimerIdAC(timerId));\r\n    }\r\n    if (openedCards.length === 1) {\r\n      if (openedCards[0].value === value) {\r\n        dispatch(addCardsToGuessedThunk(openedCards[0].id, id));\r\n        if (cardsGuessed === 14) dispatch(endGame());\r\n      } else {\r\n        // dispatch(setLocalTimerAC(false));\r\n      }\r\n      dispatch(closeAllCardsThunk());\r\n      dispatch(setLocalTimerAC(false));\r\n      window.clearTimeout(getState().mainReducer.timerId);\r\n    } else {\r\n      dispatch(addCardToOpenedCardsAC({ id, value }));\r\n    }\r\n  };\r\n};\r\n\r\nexport const startGame = () => {\r\n  return (dispatch, getState) => {\r\n    dispatch(toggleIsGameStartedAC(true));\r\n    dispatch(resetGame());\r\n    let gameTimer = getState().mainReducer.gameTimer;\r\n    let intervalId = setInterval(() => {\r\n      gameTimer++;\r\n      dispatch(setGameTimeAC(gameTimer));\r\n    }, 1000);\r\n    dispatch(setIntervalIdAC(intervalId));\r\n  };\r\n};\r\n","export function formatSeconds(seconds) {\r\n  if (seconds <= 9) return `00:0${seconds}`;\r\n  if (seconds > 9 && seconds < 60) return `00:${seconds}`;\r\n  if (seconds >= 60)\r\n    return `0${Math.floor(seconds / 60)}:${\r\n      seconds % 60 < 9 ? \"0\" + (seconds % 60) : seconds % 60\r\n    }`;\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport s from \"./Header.module.css\";\r\nimport { startGame } from \"../../store/mainReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { formatSeconds } from \"../../helpers/timerView\";\r\nconst Header = () => {\r\n  const { cardsGuessed, isGameStart, gameTimer } = useSelector(\r\n    (state) => state.mainReducer\r\n  );\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className={s.header}>\r\n      <div className={s.timer}>{formatSeconds(gameTimer)}</div>\r\n      <div className={s.counter}>\r\n        {cardsGuessed}\r\n        <span>/16</span>\r\n      </div>\r\n      <button\r\n        disabled={isGameStart}\r\n        className={`${s.button} ${isGameStart && s.hide}`}\r\n        onClick={() => dispatch(startGame())}\r\n      >\r\n        старт\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport s from \"./Card.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setCardOpen } from \"../../store/mainReducer\";\r\nconst Card = ({ data }) => {\r\n  // data = { id: number, isOpen: boolean, value: string, isOnBoard: boolean },\r\n  const dispatch = useDispatch();\r\n  const { isInterfaceBlocked, isGameStart } = useSelector(\r\n    (state) => state.mainReducer\r\n  );\r\n  function openCard(id, value) {\r\n    dispatch(setCardOpen(id, value));\r\n  }\r\n  return (\r\n    <button\r\n      disabled={isInterfaceBlocked || !data.isOnBoard || !isGameStart || data.isOpen}\r\n      className={`${s.card} ${data.isOpen && s.active} ${\r\n        !data.isOnBoard && s.hide\r\n      } ${!isGameStart && s.disabled}`}\r\n      onClick={() => openCard(data.id, data.value)}\r\n    >\r\n      <div className={s.front}></div>\r\n      <div className={s.back}>{data.value}</div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Header from \"../Header/Header\";\r\nimport s from \"./GameBoard.module.css\";\r\nimport Card from \"./../Card/Card\";\r\nimport { formatSeconds } from \"../../helpers/timerView\";\r\nconst GameBoard = () => {\r\n  //   const dispatch = useDispatch();\r\n  const { cards, isGameStart } = useSelector((state) => state.mainReducer);\r\n  let [times, setTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let timers = JSON.parse(localStorage.getItem(\"times\")) || [];\r\n    timers.sort((a, b) => a - b);\r\n    setTimes(timers.slice(0, 5));\r\n  }, [isGameStart]);\r\n\r\n  return (\r\n    <div className={s.gameBoard}>\r\n      <Header />\r\n      <div className={`${s.cards} ${!isGameStart && s.hide}`}>\r\n        {cards.map((card) => (\r\n          <Card key={card.id} data={card} />\r\n        ))}\r\n      </div>\r\n      <div className={`${s.times} ${isGameStart && s.hide}`}>\r\n        <div className={s.times_title}>Ваши лучшие результаты:</div>\r\n        {times.map((time) => (\r\n          <div className={s.time}>{formatSeconds(time)}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import GameBoard from \"./components/GameBoard/GameBoard\";\nimport \"./index.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"inner\">\n          <GameBoard />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { mainReducer } from \"./mainReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nlet rootReducer = combineReducers({ mainReducer });\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport { store } from \"./store/index\";\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBoard\":\"GameBoard_gameBoard__2HoRA\",\"cards\":\"GameBoard_cards__OHGMk\",\"hide\":\"GameBoard_hide__Vz8U3\",\"times\":\"GameBoard_times__1nbuX\",\"times_title\":\"GameBoard_times_title__2NQh1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__UZPyI\",\"hide\":\"Card_hide__3Dw17\",\"disabled\":\"Card_disabled__3Dj_N\",\"front\":\"Card_front__16u2A\",\"back\":\"Card_back__VohHJ\",\"active\":\"Card_active__3N7jW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__8xXYP\",\"counter\":\"Header_counter__cKzG-\",\"timer\":\"Header_timer__2aITj\",\"button\":\"Header_button__1sL24\",\"hide\":\"Header_hide__1s8zf\"};"],"sourceRoot":""}